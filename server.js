// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const compression = require('compression');
const path = require('path');
const multer = require('multer');
const fs = require('fs');
const pickupPointsRouter = require('./api/pickup-points');
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

const app = express();

// Middleware
app.use(compression()); // –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
app.use(cors());
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MIME —Ç–∏–ø–æ–≤
app.use((req, res, next) => {
  if (req.path.endsWith('.webp')) {
    res.setHeader('Content-Type', 'image/webp');
  } else if (req.path.endsWith('.avif')) {
    res.setHeader('Content-Type', 'image/avif');
  }
  next();
});

// MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const mongoUri = process.env.MONGO_URI || 'mongodb+srv://electro:electro123@cluster0.mongodb.net/Tanker_products?retryWrites=true&w=majority';
const PORT = process.env.PORT || 5000;

mongoose.connect(mongoUri, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// –ú–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–∞
const productSchema = new mongoose.Schema({}, { strict: false, collection: 'products' });
const Product = mongoose.model('Product', productSchema);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = path.join(__dirname, 'uploads');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    const timestamp = Date.now();
    const randomString = Math.random().toString(36).substring(2, 15);
    const extension = path.extname(file.originalname);
    cb(null, `${timestamp}_${randomString}${extension}`);
  }
});

const upload = multer({
  storage: storage,
  fileFilter: function (req, file, cb) {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'), false);
    }
  },
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB
  }
});

// API Routes

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
app.get('/api/products', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 0;
    const products = await Product.find().limit(limit);
    res.json(products);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID
app.get('/api/products/:id', async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);
    if (!product) return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json(product);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
app.post('/api/products', async (req, res) => {
  try {
    const product = new Product(req.body);
    await product.save();
    res.status(201).json(product);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
app.put('/api/products/:id', async (req, res) => {
  try {
    const { _id, ...updateData } = req.body; // –£–±–∏—Ä–∞–µ–º _id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const product = await Product.findByIdAndUpdate(req.params.id, updateData, { new: true });
    if (!product) return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json(product);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
app.delete('/api/products/:id', async (req, res) => {
  try {
    const product = await Product.findByIdAndDelete(req.params.id);
    if (!product) return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json({ message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
app.post('/api/upload', upload.single('file'), (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }
    
    const fileUrl = `/uploads/${req.file.filename}`;
    res.json({ 
      success: true, 
      files: [fileUrl],
      message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message });
  }
});

// Telegram Bot API endpoint
app.post('/api/send-telegram', async (req, res) => {
  try {
    const { name, phone, message, product } = req.body;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;
    
    if (!botToken) {
      console.error('Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return res.status(500).json({ error: 'Telegram bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const telegramMessage = `
üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!

üë§ –ò–º—è: ${name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
${product ? `üõçÔ∏è –¢–æ–≤–∞—Ä: ${product}` : ''}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üåê –ò—Å—Ç–æ—á–Ω–∏–∫: ${req.headers.referer || '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥'}
    `;
    
    let success = false;
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω Chat ID - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–¥–∞
    if (chatId) {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: telegramMessage,
          parse_mode: 'HTML'
        })
      });
      
      const result = await response.json();
      success = result.ok;
      
      if (!success) {
        console.error('–û—à–∏–±–∫–∞ Telegram API:', result);
      }
    } else {
      // –ï—Å–ª–∏ Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥
      console.log('Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ (Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω):', telegramMessage);
      success = true; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥–∏—Ä—É–µ–º
    }
    
    if (success) {
      res.json({ success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram' });
    } else {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram' });
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram' });
  }
});

// –†–æ—É—Ç—ã –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
app.use('/api/pickup-points', pickupPointsRouter);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const cacheControl = (req, res, next) => {
  const ext = path.extname(req.path).toLowerCase();
  
  if (ext === '.css' || ext === '.js') {
    res.setHeader('Cache-Control', 'public, max-age=31536000, immutable'); // 1 –≥–æ–¥
  } else if (ext === '.png' || ext === '.jpg' || ext === '.jpeg' || ext === '.gif' || ext === '.webp' || ext === '.svg') {
    res.setHeader('Cache-Control', 'public, max-age=31536000, immutable'); // 1 –≥–æ–¥
  } else if (ext === '.woff' || ext === '.woff2' || ext === '.ttf' || ext === '.otf') {
    res.setHeader('Cache-Control', 'public, max-age=31536000, immutable'); // 1 –≥–æ–¥
  } else if (ext === '.html') {
    res.setHeader('Cache-Control', 'public, max-age=3600'); // 1 —á–∞—Å
  } else {
    res.setHeader('Cache-Control', 'public, max-age=86400'); // 1 –¥–µ–Ω—å
  }
  
  next();
};

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ uploads —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
app.use('/uploads', cacheControl, express.static(path.join(__dirname, 'uploads')));

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ public —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
app.use(express.static(path.join(__dirname, '../public'), {
  setHeaders: (res, path) => {
    const ext = require('path').extname(path).toLowerCase();
    
    if (ext === '.css' || ext === '.js') {
      res.setHeader('Cache-Control', 'public, max-age=31536000, immutable'); // 1 –≥–æ–¥
    } else if (ext === '.png' || ext === '.jpg' || ext === '.jpeg' || ext === '.gif' || ext === '.webp' || ext === '.svg' || ext === '.avif') {
      res.setHeader('Cache-Control', 'public, max-age=31536000, immutable'); // 1 –≥–æ–¥
    } else if (ext === '.woff' || ext === '.woff2' || ext === '.ttf' || ext === '.otf') {
      res.setHeader('Cache-Control', 'public, max-age=31536000, immutable'); // 1 –≥–æ–¥
    } else if (ext === '.html') {
      res.setHeader('Cache-Control', 'public, max-age=3600'); // 1 —á–∞—Å
    } else {
      res.setHeader('Cache-Control', 'public, max-age=86400'); // 1 –¥–µ–Ω—å
    }
  }
}));

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ build —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
app.use(express.static(path.join(__dirname, '../build'), {
  setHeaders: (res, path) => {
    const ext = require('path').extname(path).toLowerCase();
    
    if (ext === '.css' || ext === '.js') {
      res.setHeader('Cache-Control', 'public, max-age=31536000, immutable'); // 1 –≥–æ–¥
    } else if (ext === '.png' || ext === '.jpg' || ext === '.jpeg' || ext === '.gif' || ext === '.webp' || ext === '.svg' || ext === '.avif') {
      res.setHeader('Cache-Control', 'public, max-age=31536000, immutable'); // 1 –≥–æ–¥
    } else if (ext === '.woff' || ext === '.woff2' || ext === '.ttf' || ext === '.otf') {
      res.setHeader('Cache-Control', 'public, max-age=31536000, immutable'); // 1 –≥–æ–¥
    } else if (ext === '.html') {
      res.setHeader('Cache-Control', 'public, max-age=3600'); // 1 —á–∞—Å
    } else {
      res.setHeader('Cache-Control', 'public, max-age=86400'); // 1 –¥–µ–Ω—å
    }
  }
}));

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ public —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
app.use('/images', express.static(path.join(__dirname, '../public/images'), {
  setHeaders: (res, path) => {
    const ext = require('path').extname(path).toLowerCase();
    
    if (ext === '.png' || ext === '.jpg' || ext === '.jpeg' || ext === '.gif' || ext === '.webp' || ext === '.svg' || ext === '.avif') {
      res.setHeader('Cache-Control', 'public, max-age=31536000, immutable'); // 1 –≥–æ–¥
    }
  }
}));

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ React Router - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ index.html
app.get('*', (req, res) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ API –∑–∞–ø—Ä–æ—Å
  if (req.path.startsWith('/api/')) {
    return res.status(404).json({ error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
  const ext = path.extname(req.path).toLowerCase();
  if (ext && ext !== '.html') {
    return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º index.html –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (React Router)
  res.sendFile(path.join(__dirname, '../build/index.html'));
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});