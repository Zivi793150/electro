import React, { useState, useEffect } from 'react';
import './ProductMerge.css';

const API_URL = 'https://electro-a8bl.onrender.com/api';

function ProductMerge({ onLogout }) {
  const [products, setProducts] = useState([]);
  const [selectedProducts, setSelectedProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [masterProducts, setMasterProducts] = useState([]);
  const [showMergeForm, setShowMergeForm] = useState(false);
  const [mergeFormData, setMergeFormData] = useState({
    name: '',
    category: '',
    description: '',
    shortDescription: '',
    mainImage: '',
    variationType: 'power'
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const fetchProducts = async () => {
    try {
      setLoading(true);
      const response = await fetch(`${API_URL}/products`);
      const data = await response.json();
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
      setProducts(Array.isArray(data) ? data : []);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
      console.error(err);
      setProducts([]);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä-—Ç–æ–≤–∞—Ä–æ–≤
  const fetchMasterProducts = async () => {
    try {
      const response = await fetch(`${API_URL}/master-products`);
      const data = await response.json();
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
      setMasterProducts(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä-—Ç–æ–≤–∞—Ä–æ–≤:', err);
      setMasterProducts([]);
    }
  };

  useEffect(() => {
    fetchProducts();
    fetchMasterProducts();
  }, []);

  // –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
  const handleProductSelect = (productId) => {
    setSelectedProducts(prev => {
      if (prev.includes(productId)) {
        return prev.filter(id => id !== productId);
      } else {
        return [...prev, productId];
      }
    });
  };

  // –í—ã–±–æ—Ä –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const handleSelectAll = () => {
    if (!Array.isArray(products)) return;
    
    if (selectedProducts.length === products.length) {
      setSelectedProducts([]);
    } else {
      setSelectedProducts(products.filter(p => p && p._id).map(p => p._id));
    }
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
  const handleMergeClick = () => {
    if (selectedProducts.length < 2) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è');
      return;
    }
    
    const selectedProductObjects = products.filter(p => selectedProducts.includes(p._id));
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const firstProduct = selectedProductObjects[0];
    setMergeFormData({
      name: firstProduct.name.replace(/\d+\s*[–í—ÇW]/i, '').trim(), // –£–±–∏—Ä–∞–µ–º –º–æ—â–Ω–æ—Å—Ç—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
      category: firstProduct.category || '',
      description: firstProduct.description || '',
      shortDescription: firstProduct['Short description'] || '',
      mainImage: firstProduct.image || '',
      variationType: 'power'
    });
    
    setShowMergeForm(true);
    setError('');
  };

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
  const handleMergeSubmit = async (e) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError('');
      
      const response = await fetch(`${API_URL}/merge-products`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          productIds: selectedProducts,
          masterProductData: mergeFormData,
          variationType: mergeFormData.variationType
        })
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤');
      }
      
      setSuccess(data.message);
      setSelectedProducts([]);
      setShowMergeForm(false);
      setMergeFormData({
        name: '',
        category: '',
        description: '',
        shortDescription: '',
        mainImage: '',
        variationType: 'power'
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
      await fetchProducts();
      await fetchMasterProducts();
      
      // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => setSuccess(''), 3000);
      
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-—Ç–æ–≤–∞—Ä–∞
  const handleDeleteMasterProduct = async (masterProductId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä-—Ç–æ–≤–∞—Ä –∏ –≤—Å–µ –µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–∏?')) {
      return;
    }
    
    try {
      const response = await fetch(`${API_URL}/master-products/${masterProductId}`, {
        method: 'DELETE'
      });
      
      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
      }
      
      setSuccess('–ú–∞—Å—Ç–µ—Ä-—Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      await fetchMasterProducts();
      
      setTimeout(() => setSuccess(''), 3000);
    } catch (err) {
      setError(err.message);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const getSelectedProductObjects = () => {
    if (!Array.isArray(products)) return [];
    return products.filter(p => p && p._id && selectedProducts.includes(p._id));
  };

  return (
    <div className="product-merge">
      <div className="product-merge-header">
        <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20}}>
          <div>
            <h1>–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</h1>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ—â–Ω–æ—Å—Ç—å—é), –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ –∏—Ö –≤ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏.</p>
          </div>
          <div style={{display: 'flex', gap: 10}}>
            <button 
              onClick={() => window.location.href = '/admin/products'} 
              style={{
                background: '#1976d2', 
                color: '#fff', 
                fontWeight: 600, 
                fontSize: 15, 
                border: 'none', 
                borderRadius: 7, 
                padding: '8px 18px', 
                cursor: 'pointer'
              }}
            >
              üì¶ –¢–æ–≤–∞—Ä—ã
            </button>
            <button 
              onClick={() => window.location.href = '/admin/settings'} 
              style={{
                background: '#1e88e5', 
                color: '#fff', 
                fontWeight: 600, 
                fontSize: 15, 
                border: 'none', 
                borderRadius: 7, 
                padding: '8px 18px', 
                cursor: 'pointer'
              }}
            >
              ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            </button>
            <button 
              onClick={() => window.location.href = '/admin/pickup-points'} 
              style={{
                background: '#28a745', 
                color: '#fff', 
                fontWeight: 600, 
                fontSize: 15, 
                border: 'none', 
                borderRadius: 7, 
                padding: '8px 18px', 
                cursor: 'pointer'
              }}
            >
              üè¨ –ü—É–Ω–∫—Ç—ã —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
            </button>
            <button 
              onClick={onLogout} 
              style={{
                background: '#e53935', 
                color: '#fff', 
                fontWeight: 600, 
                fontSize: 15, 
                border: 'none', 
                borderRadius: 7, 
                padding: '8px 18px', 
                cursor: 'pointer'
              }}
            >
              –í—ã–π—Ç–∏
            </button>
          </div>
        </div>
      </div>

      {error && (
        <div className="error-message">
          {error}
          <button onClick={() => setError('')}>&times;</button>
        </div>
      )}

      {success && (
        <div className="success-message">
          {success}
          <button onClick={() => setSuccess('')}>&times;</button>
        </div>
      )}

      <div className="product-merge-content">
        <div className="product-merge-section">
          <div className="section-header">
            <h2>–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è</h2>
            <div className="section-actions">
              <button 
                onClick={handleSelectAll}
                className="btn-secondary"
              >
                                 {Array.isArray(products) && selectedProducts.length === products.length ? '–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ' : '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'}
              </button>
              <button 
                onClick={handleMergeClick}
                disabled={selectedProducts.length < 2 || loading}
                className="btn-primary"
              >
                –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({selectedProducts.length})
              </button>
            </div>
          </div>

          {loading ? (
            <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>
          ) : (
            <div className="products-grid">
              {Array.isArray(products) && products.map(product => (
                <div 
                  key={product._id || Math.random()} 
                  className={`product-card ${selectedProducts.includes(product._id) ? 'selected' : ''}`}
                  onClick={() => product._id && handleProductSelect(product._id)}
                >
                                     <div className="product-image">
                     <img src={product.image || '/images/products/placeholder.png'} alt={product.name || '–¢–æ–≤–∞—Ä'} />
                   </div>
                                     <div className="product-info">
                     <h3>{product.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                     <p className="product-price">{product.price || '0'} ‚Ç∏</p>
                     <p className="product-article">–ê—Ä—Ç–∏–∫—É–ª: {product.article || '–ù–µ—Ç'}</p>
                    {product.characteristics && (
                      <div className="product-characteristics">
                        <small>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</small>
                        <div className="characteristics-preview">
                          {typeof product.characteristics === 'string' 
                            ? product.characteristics.substring(0, 100) + '...'
                            : JSON.stringify(product.characteristics).substring(0, 100) + '...'
                          }
                        </div>
                      </div>
                    )}
                  </div>
                                     <div className="product-checkbox">
                     <input 
                       type="checkbox" 
                       checked={product._id ? selectedProducts.includes(product._id) : false}
                       onChange={() => product._id && handleProductSelect(product._id)}
                       onClick={(e) => e.stopPropagation()}
                     />
                   </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {showMergeForm && (
          <div className="merge-form-overlay">
            <div className="merge-form">
              <div className="form-header">
                <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è</h2>
                <button onClick={() => setShowMergeForm(false)}>&times;</button>
              </div>
              
              <form onSubmit={handleMergeSubmit}>
                <div className="form-group">
                  <label>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-—Ç–æ–≤–∞—Ä–∞:</label>
                  <input
                    type="text"
                    value={mergeFormData.name}
                    onChange={(e) => setMergeFormData(prev => ({ ...prev, name: e.target.value }))}
                    required
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£–≥–ª–æ–≤–∞—è —à–ª–∏—Ñ–æ–≤–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞"
                  />
                </div>

                <div className="form-group">
                  <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                  <input
                    type="text"
                    value={mergeFormData.category}
                    onChange={(e) => setMergeFormData(prev => ({ ...prev, category: e.target.value }))}
                    required
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–æ–ª–≥–∞—Ä–∫–∞"
                  />
                </div>

                <div className="form-group">
                  <label>–¢–∏–ø –≤–∞—Ä–∏–∞—Ü–∏–∏:</label>
                  <select
                    value={mergeFormData.variationType}
                    onChange={(e) => setMergeFormData(prev => ({ ...prev, variationType: e.target.value }))}
                  >
                    <option value="power">–ú–æ—â–Ω–æ—Å—Ç—å (–í—Ç)</option>
                    <option value="voltage">–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)</option>
                    <option value="size">–†–∞–∑–º–µ—Ä</option>
                    <option value="color">–¶–≤–µ—Ç</option>
                    <option value="custom">–î—Ä—É–≥–æ–µ</option>
                  </select>
                </div>

                <div className="form-group">
                  <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                  <textarea
                    value={mergeFormData.description}
                    onChange={(e) => setMergeFormData(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                    rows="3"
                  />
                </div>

                <div className="form-group">
                  <label>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</label>
                  <textarea
                    value={mergeFormData.shortDescription}
                    onChange={(e) => setMergeFormData(prev => ({ ...prev, shortDescription: e.target.value }))}
                    placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                    rows="2"
                  />
                </div>

                <div className="form-group">
                  <label>–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</label>
                  <input
                    type="text"
                    value={mergeFormData.mainImage}
                    onChange={(e) => setMergeFormData(prev => ({ ...prev, mainImage: e.target.value }))}
                    placeholder="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                  />
                </div>

                <div className="selected-products-preview">
                  <h4>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ({selectedProducts.length}):</h4>
                  <div className="selected-products-list">
                                         {getSelectedProductObjects().map(product => (
                       <div key={product._id || Math.random()} className="selected-product-item">
                         <img src={product.image || '/images/products/placeholder.png'} alt={product.name || '–¢–æ–≤–∞—Ä'} />
                         <div>
                           <strong>{product.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</strong>
                           <span>{product.price || '0'} ‚Ç∏</span>
                         </div>
                       </div>
                     ))}
                  </div>
                </div>

                <div className="form-actions">
                  <button type="button" onClick={() => setShowMergeForm(false)} className="btn-secondary">
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button type="submit" disabled={loading} className="btn-primary">
                    {loading ? '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ...' : '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        <div className="product-merge-section">
          <h2>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Å—Ç–µ—Ä-—Ç–æ–≤–∞—Ä—ã</h2>
          {!Array.isArray(masterProducts) || masterProducts.length === 0 ? (
            <p>–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</p>
          ) : (
            <div className="master-products-list">
              {masterProducts.map(masterProduct => (
                <div key={masterProduct._id} className="master-product-card">
                  <div className="master-product-info">
                    <h3>{masterProduct.name}</h3>
                    <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {masterProduct.category}</p>
                    <p>–¢–∏–ø—ã –≤–∞—Ä–∏–∞—Ü–∏–π: {Array.isArray(masterProduct.variationTypes) ? masterProduct.variationTypes.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                    <p>–°–æ–∑–¥–∞–Ω: {masterProduct.createdAt ? new Date(masterProduct.createdAt).toLocaleDateString() : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                  </div>
                  <div className="master-product-actions">
                    <button 
                      onClick={() => handleDeleteMasterProduct(masterProduct._id)}
                      className="btn-danger"
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default ProductMerge; 