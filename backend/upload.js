const multer = require('multer');
const sharp = require('sharp');
const path = require('path');
const fs = require('fs');
const axios = require('axios');
const FormData = require('form-data');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = 'public/uploads/';
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    cb(null, 'file-' + uniqueSuffix + ext);
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: function (req, file, cb) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!'), false);
    }
  },
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB –º–∞–∫—Å–∏–º—É–º
  }
});

// Middleware –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebP
const convertToWebP = async (req, res, next) => {
  if (!req.file) {
    console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
    return next();
  }

  try {
    const originalPath = req.file.path;
    const webpPath = originalPath.replace(/\.[^/.]+$/, '.webp');
    
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ WebP:');
    console.log('   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª:', originalPath);
    console.log('   WebP —Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω:', webpPath);
    console.log('   –†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', req.file.size, '–±–∞–π—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    if (!fs.existsSync(originalPath)) {
      console.error('‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', originalPath);
      return next();
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    await sharp(originalPath)
      .webp({ 
        quality: 80, // –ö–∞—á–µ—Å—Ç–≤–æ 80% (—Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞–∑–º–µ—Ä/–∫–∞—á–µ—Å—Ç–≤–æ)
        effort: 6    // –£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è (0-6, 6 = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ)
      })
      .toFile(webpPath);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ webp —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
    if (fs.existsSync(webpPath)) {
      const webpStats = fs.statSync(webpPath);
      console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ WebP: ${originalPath} -> ${webpPath}`);
      console.log(`   –†–∞–∑–º–µ—Ä WebP —Ñ–∞–π–ª–∞: ${webpStats.size} –±–∞–π—Ç`);
    } else {
      console.error('‚ùå WebP —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω:', webpPath);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ WebP –≤–µ—Ä—Å–∏–∏ –≤ req.file
    req.file.webpPath = webpPath;
    req.file.webpUrl = webpPath.replace('public', '');
    
    next();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebP:', error);
    console.error('   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
    console.error('   –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', error.stack);
    next(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
  }
};

// Middleware –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const createImageSizes = async (req, res, next) => {
  if (!req.file) {
    return next();
  }

  try {
    const originalPath = req.file.path;
    const sizes = [
      { name: 'thumb', width: 150, height: 150 },
      { name: 'medium', width: 400, height: 400 },
      { name: 'large', width: 800, height: 800 }
    ];

    req.file.variants = {};

    for (const size of sizes) {
      const variantPath = originalPath.replace(/\.[^/.]+$/, `-${size.name}.webp`);
      
      await sharp(originalPath)
        .resize(size.width, size.height, {
          fit: 'inside',
          withoutEnlargement: true
        })
        .webp({ quality: 80 })
        .toFile(variantPath);

      req.file.variants[size.name] = {
        path: variantPath,
        url: variantPath.replace('public', ''),
        width: size.width,
        height: size.height
      };
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${Object.keys(req.file.variants).join(', ')}`);
    next();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', error);
    next();
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ upload.php
async function uploadToPlesk(localFilePath, remoteUploadUrl) {
  const form = new FormData();
  form.append('file', fs.createReadStream(localFilePath));
  const response = await axios.post(remoteUploadUrl, form, {
    headers: form.getHeaders(),
    maxContentLength: Infinity,
    maxBodyLength: Infinity,
    timeout: 20000,
  });
  return response.data;
}

// Middleware –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ Plesk –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
const uploadToPleskMiddleware = async (req, res, next) => {
  if (!req.file) return next();
  try {
    // –£–∫–∞–∂–∏ —Å–≤–æ–π URL upload.php:
    const PLESK_UPLOAD_URL = 'https://www.eltok.kz/upload.php';
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    const origResult = await uploadToPlesk(req.file.path, PLESK_UPLOAD_URL);
    if (origResult.success && origResult.files && origResult.files[0]) {
      req.file.pleskUrl = origResult.files[0];
      // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ä–∏–≥–∏–Ω–∞–ª
      fs.unlinkSync(req.file.path);
    } else {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –Ω–∞ Plesk:', origResult);
    }
    // –ó–∞–≥—Ä—É–∂–∞–µ–º webp
    if (req.file.webpPath && fs.existsSync(req.file.webpPath)) {
      const webpResult = await uploadToPlesk(req.file.webpPath, PLESK_UPLOAD_URL);
      if (webpResult.success && webpResult.files && webpResult.files[0]) {
        req.file.pleskWebpUrl = webpResult.files[0];
        // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π webp
        fs.unlinkSync(req.file.webpPath);
      } else {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ webp –Ω–∞ Plesk:', webpResult);
      }
    }
    next();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Plesk:', err);
    next();
  }
};

module.exports = {
  upload: upload.single('image'),
  convertToWebP,
  createImageSizes,
  uploadToPleskMiddleware
}; 